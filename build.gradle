plugins {
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'pl.databucket'
version = '3.2.5'
targetCompatibility = 8
sourceCompatibility = 8

//compileJava.options.fork = true
//compileJava.options.forkOptions.executable = 'C:\\Program Files\\Java\\jdk1.8.0_191\\bin\\javac'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter:2.5.7'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.7'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.7'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.5.7'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.5.7'
    implementation 'org.springframework:spring-tx:5.3.9'
    implementation 'org.postgresql:postgresql:42.2.23.jre7'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.1'
    implementation 'org.projectlombok:lombok:1.18.20'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.10.0'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.12.0'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.4.4'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.29'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test:2.5.4') {exclude group: 'junit', module: 'junit'}

    // JUnit dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-commons:1.7.2'

    // Spock - Mandatory dependencies
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.8'
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'org.spockframework:spock-spring:2.0-groovy-3.0'
}

test {
//    useJUnitPlatform()
    afterSuite {desc, result ->
        if (!desc.parent) {
            println("${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
        }
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

task deleteStatic(type: Delete) {
    delete "src/main/resources/static"
}

task buildFrontend() {
    String npm = 'npm'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        npm = 'npm.cmd'
    }

    exec {
        workingDir 'frontend'
        commandLine npm, 'install'
    }

    exec {
        workingDir 'frontend'
        commandLine npm, 'run', 'build'
    }
}

task copyFrontend() {
    copy {
        from "frontend/build"
        into "src/main/resources/static"
    }
}

copyFrontend.dependsOn buildFrontend

bootJar.dependsOn copyFrontend